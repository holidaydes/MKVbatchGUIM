/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.holiday.mkvbatchguim.gui;

import de.holiday.mkvbatchguim.common.language.ButtonValue;
import de.holiday.mkvbatchguim.common.Constans;
import de.holiday.mkvbatchguim.common.language.LabelValue;
import de.holiday.mkvbatchguim.common.Language;
import de.holiday.mkvbatchguim.common.language.MessageValue;
import de.holiday.mkvbatchguim.common.language.TitleValue;
import de.holiday.mkvbatchguim.config.Configuration;
import de.holiday.mkvbatchguim.config.logic.Config;
import java.util.Arrays;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author holiday
 */
public class GuiJFrame extends javax.swing.JFrame {

    private Language lang;

    /**
     * Creates new form GuiJFrame
     */
    public GuiJFrame() {
        initComponents();
        this.setTitle(Constans.TITLE);
        this.seriesTitleTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                enableComponents();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                enableComponents();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                enableComponents();
            }
        });
        this.releaseTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                enableComponents();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                enableComponents();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                enableComponents();
            }
        });
        readConfig();
        setLanguageComboBoxes();
        setComboBoxes();
        setLabels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        configPanel = new javax.swing.JPanel();
        languageLabel = new javax.swing.JLabel();
        languageComboBox = new javax.swing.JComboBox<>();
        mkvtoolnixPathLabel = new javax.swing.JLabel();
        mkvtoolnixPathTextField = new javax.swing.JTextField();
        mkvtoolnixPathButton = new javax.swing.JButton();
        saveConfigButton = new javax.swing.JButton();
        inputConfigPanel = new javax.swing.JPanel();
        inputVideoLabel = new javax.swing.JLabel();
        inputAudioLabel = new javax.swing.JLabel();
        forcedSubtitleLabel = new javax.swing.JLabel();
        engSubtitleLabel = new javax.swing.JLabel();
        inputVideoTextField = new javax.swing.JTextField();
        inputAudioTextField = new javax.swing.JTextField();
        engSubtitleTextField = new javax.swing.JTextField();
        forcedSubtitleTextField = new javax.swing.JTextField();
        inputVideoButton = new javax.swing.JButton();
        inputAudioButton = new javax.swing.JButton();
        engSubtitleButton = new javax.swing.JButton();
        forcedSubtitleButton = new javax.swing.JButton();
        outputConfigPanel = new javax.swing.JPanel();
        seasonLabel = new javax.swing.JLabel();
        seasonSpinner = new javax.swing.JSpinner();
        videoTypeLabel = new javax.swing.JLabel();
        videoTypeComboBox = new javax.swing.JComboBox<>();
        resolutionLabel = new javax.swing.JLabel();
        resolutionComboBox = new javax.swing.JComboBox<>();
        outputVideoLabel = new javax.swing.JLabel();
        outputVideoButton = new javax.swing.JButton();
        outputVideoTextField = new javax.swing.JTextField();
        codecTypeLabel = new javax.swing.JLabel();
        codecTypeComboBox = new javax.swing.JComboBox<>();
        releaseLabel = new javax.swing.JLabel();
        releaseTextField = new javax.swing.JTextField();
        seriesTitleLabel = new javax.swing.JLabel();
        seriesTitleTextField = new javax.swing.JTextField();
        outputListPanel = new javax.swing.JPanel();
        outputListScrollPane = new javax.swing.JScrollPane();
        outputListList = new javax.swing.JList<>();
        startButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 800));
        setResizable(false);

        configPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("configLabel"));

        languageLabel.setText("languageLabel");

        languageComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageComboBoxActionPerformed(evt);
            }
        });

        mkvtoolnixPathLabel.setText("mkvtoolnixPathLabel");

        mkvtoolnixPathTextField.setEnabled(false);

        mkvtoolnixPathButton.setText("mkvtoolnixPathButton");
        mkvtoolnixPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mkvtoolnixPathButtonActionPerformed(evt);
            }
        });

        saveConfigButton.setText("saveConfigButton");
        saveConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configPanelLayout = new javax.swing.GroupLayout(configPanel);
        configPanel.setLayout(configPanelLayout);
        configPanelLayout.setHorizontalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configPanelLayout.createSequentialGroup()
                        .addComponent(mkvtoolnixPathLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mkvtoolnixPathButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configPanelLayout.createSequentialGroup()
                        .addComponent(languageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveConfigButton))
                    .addComponent(mkvtoolnixPathTextField))
                .addContainerGap())
        );
        configPanelLayout.setVerticalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mkvtoolnixPathLabel)
                    .addComponent(mkvtoolnixPathButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mkvtoolnixPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveConfigButton)
                    .addComponent(languageLabel)
                    .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inputConfigPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("inputConfigLabel"));

        inputVideoLabel.setText("inputVideoLabel");
        inputVideoLabel.setEnabled(false);

        inputAudioLabel.setText("inputAudioLabel");
        inputAudioLabel.setEnabled(false);

        forcedSubtitleLabel.setText("forcedSubtitleLabel");
        forcedSubtitleLabel.setEnabled(false);

        engSubtitleLabel.setText("engSubtitleLabel");
        engSubtitleLabel.setEnabled(false);

        inputVideoTextField.setEnabled(false);

        inputAudioTextField.setEnabled(false);

        engSubtitleTextField.setEnabled(false);

        forcedSubtitleTextField.setEnabled(false);

        inputVideoButton.setText("inputVideoButton");
        inputVideoButton.setEnabled(false);
        inputVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputVideoButtonActionPerformed(evt);
            }
        });

        inputAudioButton.setText("inputAudioButton");
        inputAudioButton.setEnabled(false);
        inputAudioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputAudioButtonActionPerformed(evt);
            }
        });

        engSubtitleButton.setText("engSubtitleButton");
        engSubtitleButton.setEnabled(false);
        engSubtitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engSubtitleButtonActionPerformed(evt);
            }
        });

        forcedSubtitleButton.setText("forcedSubtitleButton");
        forcedSubtitleButton.setEnabled(false);
        forcedSubtitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forcedSubtitleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputConfigPanelLayout = new javax.swing.GroupLayout(inputConfigPanel);
        inputConfigPanel.setLayout(inputConfigPanelLayout);
        inputConfigPanelLayout.setHorizontalGroup(
            inputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(forcedSubtitleTextField)
                    .addComponent(inputAudioTextField)
                    .addComponent(inputVideoTextField)
                    .addGroup(inputConfigPanelLayout.createSequentialGroup()
                        .addComponent(inputVideoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(inputVideoButton))
                    .addGroup(inputConfigPanelLayout.createSequentialGroup()
                        .addComponent(engSubtitleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(engSubtitleButton))
                    .addGroup(inputConfigPanelLayout.createSequentialGroup()
                        .addComponent(forcedSubtitleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(forcedSubtitleButton))
                    .addGroup(inputConfigPanelLayout.createSequentialGroup()
                        .addComponent(inputAudioLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(inputAudioButton))
                    .addComponent(engSubtitleTextField))
                .addContainerGap())
        );
        inputConfigPanelLayout.setVerticalGroup(
            inputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputConfigPanelLayout.createSequentialGroup()
                .addGroup(inputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputVideoLabel)
                    .addComponent(inputVideoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputVideoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputAudioLabel)
                    .addComponent(inputAudioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputAudioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(engSubtitleLabel)
                    .addComponent(engSubtitleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(engSubtitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forcedSubtitleLabel)
                    .addComponent(forcedSubtitleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(forcedSubtitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        outputConfigPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("outputConfigLabel"));

        seasonLabel.setText("seasonLabel");
        seasonLabel.setEnabled(false);

        seasonSpinner.setEnabled(false);

        videoTypeLabel.setText("videoTypeLabel");
        videoTypeLabel.setEnabled(false);

        videoTypeComboBox.setEnabled(false);
        videoTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoTypeComboBoxActionPerformed(evt);
            }
        });

        resolutionLabel.setText("dimensionLabel");
        resolutionLabel.setEnabled(false);

        resolutionComboBox.setEnabled(false);
        resolutionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolutionComboBoxActionPerformed(evt);
            }
        });

        outputVideoLabel.setText("outputVideoLabel");
        outputVideoLabel.setEnabled(false);

        outputVideoButton.setText("outputVideoButton");
        outputVideoButton.setEnabled(false);
        outputVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputVideoButtonActionPerformed(evt);
            }
        });

        outputVideoTextField.setEnabled(false);

        codecTypeLabel.setText("codecTypeLabel");
        codecTypeLabel.setEnabled(false);

        codecTypeComboBox.setEnabled(false);

        releaseLabel.setText("releaseLabel");
        releaseLabel.setEnabled(false);

        releaseTextField.setEnabled(false);

        seriesTitleLabel.setText("seriesTitleLabel");
        seriesTitleLabel.setEnabled(false);

        seriesTitleTextField.setEnabled(false);

        javax.swing.GroupLayout outputConfigPanelLayout = new javax.swing.GroupLayout(outputConfigPanel);
        outputConfigPanel.setLayout(outputConfigPanelLayout);
        outputConfigPanelLayout.setHorizontalGroup(
            outputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputVideoTextField)
                    .addGroup(outputConfigPanelLayout.createSequentialGroup()
                        .addComponent(seasonLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seasonSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(releaseLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(releaseTextField))
                    .addComponent(seriesTitleTextField)
                    .addGroup(outputConfigPanelLayout.createSequentialGroup()
                        .addGroup(outputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(outputConfigPanelLayout.createSequentialGroup()
                                .addComponent(resolutionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resolutionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(videoTypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(videoTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codecTypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codecTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(seriesTitleLabel))
                        .addGap(0, 67, Short.MAX_VALUE))
                    .addGroup(outputConfigPanelLayout.createSequentialGroup()
                        .addComponent(outputVideoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(outputVideoButton)))
                .addContainerGap())
        );
        outputConfigPanelLayout.setVerticalGroup(
            outputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputConfigPanelLayout.createSequentialGroup()
                .addComponent(seriesTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seriesTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(outputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resolutionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(videoTypeLabel)
                    .addComponent(videoTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resolutionLabel)
                    .addComponent(codecTypeLabel)
                    .addComponent(codecTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(outputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seasonLabel)
                    .addComponent(seasonSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(releaseLabel)
                    .addComponent(releaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(outputConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputVideoLabel)
                    .addComponent(outputVideoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputVideoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        seasonLabel.getAccessibleContext().setAccessibleDescription("");

        outputListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("outputListLabel"));

        outputListScrollPane.setViewportView(outputListList);

        javax.swing.GroupLayout outputListPanelLayout = new javax.swing.GroupLayout(outputListPanel);
        outputListPanel.setLayout(outputListPanelLayout);
        outputListPanelLayout.setHorizontalGroup(
            outputListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputListScrollPane)
        );
        outputListPanelLayout.setVerticalGroup(
            outputListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputListScrollPane)
        );

        startButton.setText("startButton");
        startButton.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(inputConfigPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(497, 497, 497)
                        .addComponent(startButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(configPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputConfigPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(outputListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void languageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageComboBoxActionPerformed
        if (this.languageComboBox.getItemCount() == Language.getLanguageSize()) {
            lang = Language.get(this.languageComboBox.getSelectedItem().toString());
            setLabels();
            this.languageComboBox.removeAllItems();
            setLanguageComboBoxes();
        }
    }//GEN-LAST:event_languageComboBoxActionPerformed

    private void resolutionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolutionComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resolutionComboBoxActionPerformed

    private void videoTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoTypeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_videoTypeComboBoxActionPerformed

    private void mkvtoolnixPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mkvtoolnixPathButtonActionPerformed
        String path = openFileChooser(TitleValue.FILE_CHOOSER_OPEN);
        if (path != null && path.contains(Constans.MKV_TOOL_NIX)) {
            this.mkvtoolnixPathTextField.setText(path);
            this.saveConfigButton.setEnabled(true);
            enableComponents();
        }
    }//GEN-LAST:event_mkvtoolnixPathButtonActionPerformed

    private void inputVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputVideoButtonActionPerformed
        String path = openFileChooser(TitleValue.FILE_CHOOSER_OPEN);
        this.inputVideoTextField.setText(path);
        enableComponents();
    }//GEN-LAST:event_inputVideoButtonActionPerformed

    private void inputAudioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputAudioButtonActionPerformed
        String path = openFileChooser(TitleValue.FILE_CHOOSER_OPEN);
        this.inputAudioTextField.setText(path);
        enableComponents();
    }//GEN-LAST:event_inputAudioButtonActionPerformed

    private void engSubtitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engSubtitleButtonActionPerformed
        String path = openFileChooser(TitleValue.FILE_CHOOSER_OPEN);
        this.engSubtitleTextField.setText(path);
    }//GEN-LAST:event_engSubtitleButtonActionPerformed

    private void forcedSubtitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forcedSubtitleButtonActionPerformed
        String path = openFileChooser(TitleValue.FILE_CHOOSER_OPEN);
        this.forcedSubtitleTextField.setText(path);
    }//GEN-LAST:event_forcedSubtitleButtonActionPerformed

    private void outputVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputVideoButtonActionPerformed
        String path = openFileChooser(TitleValue.FILE_CHOOSER_SAVE);
        this.outputVideoTextField.setText(path);
        enableComponents();
    }//GEN-LAST:event_outputVideoButtonActionPerformed

    private void saveConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigButtonActionPerformed
        Config cfg = new Config();
        cfg.setLanguage(lang.name());
        cfg.setMkvtoolnixPath(this.mkvtoolnixPathTextField.getText());
        boolean success = Configuration.saveConfig(cfg);
        if (success) {
            openDialog(TitleValue.DIALOG_SAVE_CONFIG.getValue(lang), MessageValue.SUCCESS_SAVE_CONFIG.getValue(lang), JOptionPane.PLAIN_MESSAGE);
        } else {
            openDialog(TitleValue.DIALOG_SAVE_CONFIG.getValue(lang), MessageValue.ERROR_SAVE_CONFIG.getValue(lang), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveConfigButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiJFrame().setVisible(true);
            }
        });
    }

    private void readConfig() {
        Config cfg = Configuration.readConfig();
        if (cfg == null) {
            lang = Language.HUN;
            this.saveConfigButton.setEnabled(false);
        } else {
            lang = Language.getLanguage(cfg.getLanguage());
            this.mkvtoolnixPathTextField.setText(cfg.getMkvtoolnixPath());
        }
        System.out.println("lang=" + lang.name());
        System.out.println("mkvtoolnixPath=" + this.mkvtoolnixPathTextField.getText());
        enableComponents();
    }

    private void setLabels() {
        //config panel
        this.configPanel.setBorder(BorderFactory.createTitledBorder(LabelValue.CONFIG.getValue(lang)));
        this.languageLabel.setText(LabelValue.LANGUAGE.getValue(lang));
        this.mkvtoolnixPathLabel.setText(LabelValue.MKVTOOLNIX_PATH.getValue(lang));
        this.mkvtoolnixPathButton.setText(ButtonValue.BROWSE.getValue(lang));
        this.saveConfigButton.setText(ButtonValue.SAVE.getValue(lang));
        //input config panel
        this.inputConfigPanel.setBorder(BorderFactory.createTitledBorder(LabelValue.INPUT_CONFIG.getValue(lang)));
        this.inputVideoLabel.setText(LabelValue.INPUT_VIDEO.getValue(lang));
        this.inputAudioLabel.setText(LabelValue.INPUT_AUDIO.getValue(lang));
        this.engSubtitleLabel.setText(LabelValue.INPUT_SUBTITLE_ENG.getValue(lang));
        this.forcedSubtitleLabel.setText(LabelValue.INPUT_SUBTITLE_FORCED.getValue(lang));
        this.inputVideoButton.setText(ButtonValue.BROWSE.getValue(lang));
        this.inputAudioButton.setText(ButtonValue.BROWSE.getValue(lang));
        this.engSubtitleButton.setText(ButtonValue.BROWSE.getValue(lang));
        this.forcedSubtitleButton.setText(ButtonValue.BROWSE.getValue(lang));
        //output config panel
        this.outputConfigPanel.setBorder(BorderFactory.createTitledBorder(LabelValue.OUTPUT_CONFIG.getValue(lang)));
        this.seasonLabel.setText(LabelValue.SEASON.getValue(lang));
        this.resolutionLabel.setText(LabelValue.RESOLUTION.getValue(lang));
        this.videoTypeLabel.setText(LabelValue.VIDEO_TYPE.getValue(lang));
        this.outputVideoLabel.setText(LabelValue.OUTPUT_VIDEO.getValue(lang));
        this.outputVideoButton.setText(ButtonValue.BROWSE.getValue(lang));
        this.seriesTitleLabel.setText(LabelValue.SERIES_TITLE.getValue(lang));
        this.releaseLabel.setText(LabelValue.RELEASE_NAME.getValue(lang));
        this.codecTypeLabel.setText(LabelValue.CODEC_TYPE.getValue(lang));
        //output list panel
        this.outputListPanel.setBorder(BorderFactory.createTitledBorder(LabelValue.OUTPUT_LIST.getValue(lang)));
        this.startButton.setText(ButtonValue.START.getValue(lang));
    }

    private void setComboBoxes() {
        Arrays.asList(Constans.DIMENSIONS).forEach(item -> {
            this.resolutionComboBox.addItem(item);
        });
        Arrays.asList(Constans.VIDEO_TYPES).forEach(item -> {
            this.videoTypeComboBox.addItem(item);
        });
        Arrays.asList(Constans.CODEC_TYPES).forEach(item -> {
            this.codecTypeComboBox.addItem(item);
        });
    }

    private void setLanguageComboBoxes() {
        this.languageComboBox.addItem(Language.HUN.getValue(lang));
        this.languageComboBox.addItem(Language.ENG.getValue(lang));
        this.languageComboBox.setSelectedItem(lang.getValue(lang));
    }

    private void enableComponents() {
        boolean mkvtoolnixPathEnabled = isNotEmpty(this.mkvtoolnixPathTextField.getText());
        boolean inputVideoEnabled = isNotEmpty(this.inputVideoTextField.getText());
        boolean inputAudioEnabled = isNotEmpty(this.inputAudioTextField.getText());
        boolean outputEnabled = isNotEmpty(this.seriesTitleTextField.getText()) && isNotEmpty(this.releaseTextField.getText()) && isNotEmpty(this.outputVideoTextField.getText());

        this.inputVideoLabel.setEnabled(mkvtoolnixPathEnabled);
        this.inputVideoButton.setEnabled(mkvtoolnixPathEnabled);
        
        this.inputAudioLabel.setEnabled(inputVideoEnabled);
        this.inputAudioButton.setEnabled(inputVideoEnabled);

        this.engSubtitleLabel.setEnabled(inputAudioEnabled);
        this.engSubtitleLabel.setEnabled(inputAudioEnabled);
        this.engSubtitleButton.setEnabled(inputAudioEnabled);

        this.forcedSubtitleLabel.setEnabled(inputAudioEnabled);
        this.forcedSubtitleLabel.setEnabled(inputAudioEnabled);
        this.forcedSubtitleButton.setEnabled(inputAudioEnabled);

        this.seriesTitleLabel.setEnabled(inputAudioEnabled);
        this.seriesTitleTextField.setEnabled(inputAudioEnabled);

        this.seasonLabel.setEnabled(inputAudioEnabled);
        this.seasonSpinner.setEnabled(inputAudioEnabled);

        this.resolutionLabel.setEnabled(inputAudioEnabled);
        this.resolutionComboBox.setEnabled(inputAudioEnabled);

        this.codecTypeLabel.setEnabled(inputAudioEnabled);
        this.codecTypeComboBox.setEnabled(inputAudioEnabled);

        this.videoTypeLabel.setEnabled(inputAudioEnabled);
        this.videoTypeComboBox.setEnabled(inputAudioEnabled);

        this.releaseLabel.setEnabled(inputAudioEnabled);
        this.releaseTextField.setEnabled(inputAudioEnabled);

        this.outputVideoLabel.setEnabled(inputAudioEnabled);
        this.outputVideoButton.setEnabled(inputAudioEnabled);
        
        this.startButton.setEnabled(outputEnabled);
    }

    private boolean isNotEmpty(String value) {
        if (value != null && !"".equals(value) && value.length() > 0) {
            return true;
        }
        return false;
    }

    private String openFileChooser(TitleValue titleValue) {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle(titleValue.getValue(lang));
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("path=" + chooser.getSelectedFile().getAbsolutePath());
            return chooser.getSelectedFile().getAbsolutePath();
        }
        return null;
    }

    private void openDialog(String title, String message, int dialogType) {
        JOptionPane.showMessageDialog(this, message, title, dialogType);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> codecTypeComboBox;
    private javax.swing.JLabel codecTypeLabel;
    private javax.swing.JPanel configPanel;
    private javax.swing.JButton engSubtitleButton;
    private javax.swing.JLabel engSubtitleLabel;
    private javax.swing.JTextField engSubtitleTextField;
    private javax.swing.JButton forcedSubtitleButton;
    private javax.swing.JLabel forcedSubtitleLabel;
    private javax.swing.JTextField forcedSubtitleTextField;
    private javax.swing.JButton inputAudioButton;
    private javax.swing.JLabel inputAudioLabel;
    private javax.swing.JTextField inputAudioTextField;
    private javax.swing.JPanel inputConfigPanel;
    private javax.swing.JButton inputVideoButton;
    private javax.swing.JLabel inputVideoLabel;
    private javax.swing.JTextField inputVideoTextField;
    private javax.swing.JComboBox<String> languageComboBox;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JButton mkvtoolnixPathButton;
    private javax.swing.JLabel mkvtoolnixPathLabel;
    private javax.swing.JTextField mkvtoolnixPathTextField;
    private javax.swing.JPanel outputConfigPanel;
    private javax.swing.JList<String> outputListList;
    private javax.swing.JPanel outputListPanel;
    private javax.swing.JScrollPane outputListScrollPane;
    private javax.swing.JButton outputVideoButton;
    private javax.swing.JLabel outputVideoLabel;
    private javax.swing.JTextField outputVideoTextField;
    private javax.swing.JLabel releaseLabel;
    private javax.swing.JTextField releaseTextField;
    private javax.swing.JComboBox<String> resolutionComboBox;
    private javax.swing.JLabel resolutionLabel;
    private javax.swing.JButton saveConfigButton;
    private javax.swing.JLabel seasonLabel;
    private javax.swing.JSpinner seasonSpinner;
    private javax.swing.JLabel seriesTitleLabel;
    private javax.swing.JTextField seriesTitleTextField;
    private javax.swing.JButton startButton;
    private javax.swing.JComboBox<String> videoTypeComboBox;
    private javax.swing.JLabel videoTypeLabel;
    // End of variables declaration//GEN-END:variables
}
